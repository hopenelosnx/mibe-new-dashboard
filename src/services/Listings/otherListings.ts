import {api,base_url} from "../apiConfig";

export type OtherListing = {
  id: number;
  name: string;
  category: string;
  description: string | null;
  status: string | null;
  published?: "1" | "0";
  created_at: string;
  updated_at: string;
};


export const getOtherListingWithPagination = async (resource: string ,page: number = 1, limit: number = 10): Promise<{
  other_listings: OtherListing[];
  pagination: {
    page: number;
    limit: number;
    totalPages: number;
    totalRecords: number;
  };
}> => {
  const response = await api.get(`${base_url}other-listings/paginated/?page=${page}&limit=${limit}&filter=${resource}`);
  if (response.status !== 200) {
    throw new Error('Failed to fetch Guides with pagination');
  }
  const data = await response.data;
  return {
    other_listings: data.other_listings,
    pagination: data.pagination,
  };
}

// Adds a new OtherListing to the API
export const addOtherListing = async (
  otherListing: Omit<OtherListing, 'id'> // Excludes 'id' since it's generated by the server
): Promise<OtherListing> => {
  const data = JSON.stringify(otherListing)
  const response = await api.post(`${base_url}other-listings/`,data, {
      headers:{
        "Content-Type":"application/json"
      }
    })

  if (response.status !== 201) {
    throw new Error('Failed to add');
  }

  return response.data;
};

// Updates an existing OtherListing in the API
export const updateOtherListing = async (
  id: number, // ID of the OtherListing to update
  otherListing: Partial<OtherListing> // Partial object to allow updating specific fields
): Promise<OtherListing> => {


  const response = await api.put(`${base_url}other-listings/${id}`, {...otherListing},{
      headers:{
        "Content-Type":"application/json"
      }
    })

  if (response.status !== 200) {
    throw new Error('Failed to update');
  }

  return response.data;
};

// Deletes an OtherListing from the API
export const deleteOtherListing = async (id: number): Promise<void> => {
  const response = await api.delete(`${base_url}other-listings/${id}`);

  if (response.status !== 200) {
    throw new Error('Failed to delete');
  }
};

export const publishOtherListing = async(id: number, published: { published: string }): Promise<OtherListing> => {
    const data = JSON.stringify(published);
    const response = await api.post(`${base_url}other-listings/published/${id}`,data,{
      headers:{
        "Content-Type":"application/json"
      }
    });
    if(response.status !== 200){
        console.log(response)
        throw new Error("Failed to publish")
    }

    return response.data;
}