import {api,base_url} from "../apiConfig";

export type TravelResource = {
  id: number;
  title: string;
  type: string;
  short_description: string | null;
  content: string | null;
  image_url: File | string | null;
  published?: "1" | "0";
  created_at: string;
  updated_at: string;
};


export const getTravelResourceWithPagination = async (resource: string ,page: number = 1, limit: number = 10): Promise<{
  travel_resource: TravelResource[];
  pagination: {
    page: number;
    limit: number;
    totalPages: number;
    totalRecords: number;
  };
}> => {
  const response = await api.get(`${base_url}travel-resources/paginated/?page=${page}&limit=${limit}&filter=${resource}`);
  if (response.status !== 200) {
    throw new Error('Failed to fetch Guides with pagination');
  }
  const data = await response.data;
  return {
    travel_resource: data.travel_resources,
    pagination: data.pagination,
  };
}

// Adds a new TravelResource to the API
export const addResource = async (
  TravelResource: Omit<TravelResource, 'id'> // Excludes 'id' since it's generated by the server
): Promise<TravelResource> => {
  const formData = new FormData();

  // Append the image URL if provided
  if (TravelResource.image_url) {
    formData.append('image', TravelResource.image_url);
  }

  // Append other fields to the form data
  Object.entries(TravelResource).forEach(([key, value]) => {
    if (key !== 'image_url' && value !== undefined && value !== null) {
      formData.append(key, value as string | Blob);
    }
  });

  const response = await api.post(`${base_url}travel-resources/`, formData);

  if (response.status !== 201) {
    throw new Error('Failed to add Guides');
  }

  return response.data;
};

// Updates an existing TravelResource in the API
export const updateResource = async (
  id: number, // ID of the TravelResource to update
  TravelResource: Partial<TravelResource> // Partial object to allow updating specific fields
): Promise<TravelResource> => {
  const formData = new FormData();

  // Append the image URL if provided
  if (TravelResource.image_url) {
    formData.append('image', TravelResource.image_url);
  }

  // Append other fields to the form data
  Object.entries(TravelResource).forEach(([key, value]) => {
    if (key !== 'image_url' && value !== undefined && value !== null) {
      formData.append(key, value as string | Blob);
    }
  });

  const response = await api.put(`${base_url}travel-resources/${id}`, formData);

  if (response.status !== 200) {
    throw new Error('Failed to update Guides');
  }

  return response.data;
};

// Deletes an TravelResource from the API
export const deleteResource = async (id: number): Promise<void> => {
  const response = await api.delete(`${base_url}travel-resources/${id}`);

  if (response.status !== 200) {
    throw new Error('Failed to delete resource');
  }
};

export const publishTravelResources = async(id: number, published: { published: string }): Promise<TravelResource> => {
    const data = JSON.stringify(published);
    const response = await api.post(`${base_url}travel-resources/published/${id}`,data,{
      headers:{
        "Content-Type":"application/json"
      }
    });
    if(response.status !== 200){
        console.log(response)
        throw new Error("Failed to publish travel resource")
    }

    return response.data;
}