import apiConfig from "../apiConfig";

export type TravelResource = {
  id: number;
  title: string;
  type: string;
  description: string | null;
  content: string | null;
  image_url: File | string | null;
  published?: "1" | "0";
  created_at: string;
  updated_at: string;
};


export const getTravelResourceWithPagination = async (page: number = 1, limit: number = 10): Promise<{
  guides: TravelResource[];
  pagination: {
    page: number;
    limit: number;
    totalPages: number;
    totalRecords: number;
  };
}> => {
  const response = await fetch(`${apiConfig.baseurl}travel-resources/paginated/?page=${page}&limit=${limit}`);
  if (!response.ok) {
    throw new Error('Failed to fetch Guides with pagination');
  }
  const data = await response.json();
  return {
    guides: data.guides,
    pagination: data.pagination,
  };
}

// Adds a new TravelResource to the API
export const addResource = async (
  TravelResource: Omit<TravelResource, 'id'> // Excludes 'id' since it's generated by the server
): Promise<TravelResource> => {
  const formData = new FormData();

  // Append the image URL if provided
  if (TravelResource.image_url) {
    formData.append('image', TravelResource.image_url);
  }

  // Append other fields to the form data
  Object.entries(TravelResource).forEach(([key, value]) => {
    if (key !== 'image_url' && value !== undefined && value !== null) {
      formData.append(key, value as string | Blob);
    }
  });

  const response = await fetch(`${apiConfig.baseurl}travel-resources/`, {
    method: 'POST',
    body: formData,
    headers:apiConfig.headers,
  });

  if (!response.ok) {
    throw new Error('Failed to add Guides');
  }

  return response.json();
};

// Updates an existing TravelResource in the API
export const updateResource = async (
  id: number, // ID of the TravelResource to update
  TravelResource: Partial<TravelResource> // Partial object to allow updating specific fields
): Promise<TravelResource> => {
  const formData = new FormData();

  // Append the image URL if provided
  if (TravelResource.image_url) {
    formData.append('image', TravelResource.image_url);
  }

  // Append other fields to the form data
  Object.entries(TravelResource).forEach(([key, value]) => {
    if (key !== 'image_url' && value !== undefined && value !== null) {
      formData.append(key, value as string | Blob);
    }
  });

  const response = await fetch(`${apiConfig.baseurl}travel-resources/${id}`, {
    method: 'PUT',
    body: formData,
    headers:apiConfig.headers,
  });

  if (!response.ok) {
    throw new Error('Failed to update Guides');
  }

  return response.json();
};

// Deletes an TravelResource from the API
export const deleteResource = async (id: number): Promise<void> => {
  const response = await fetch(`${apiConfig.baseurl}travel-resources/${id}`, {
    method: 'DELETE',
    headers:apiConfig.headers,
  });

  if (!response.ok) {
    throw new Error('Failed to delete Guides');
  }
};