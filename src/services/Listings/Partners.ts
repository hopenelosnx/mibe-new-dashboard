import {api,base_url} from '../apiConfig';

// Interface representing an partner object
export interface Partner {
  id: number; // Unique identifier for the partner
  name: string; 
  website?: string; 
  published?: string;
  logo_url?: File | string; // Optional URL of the partner's image
}

export const getPartnerWithPagination = async (page: number = 1, limit: number = 10): Promise<{
  partners: Partner[];
  pagination: {
    page: number;
    limit: number;
    totalPages: number;
    totalRecords: number;
  };
}> => {
  const response = await api.get(`${base_url}trustedby/paginated/?page=${page}&limit=${limit}`);
  if (response.status !== 200) {
    throw new Error('Failed to fetch partners with pagination');
  }
  const data = await response.data;
  return {
    partners: data.partners,
    pagination: data.pagination,
  };
}

// Adds a new partner to the API
export const addPartner = async (
  partner: Omit<Partner, 'id'> // Excludes 'id' since it's generated by the server
): Promise<Partner> => {
  const formData = new FormData();

  // Append the image URL if provided
  formData.append('image', partner.logo_url);

  // Append other fields to the form data
  Object.entries(partner).forEach(([key, value]) => {
    if (key !== 'logo_url' && value !== undefined && value !== null) {
      formData.append(key, value as string | Blob);
    }
  });

  const response = await api.post(`${base_url}trustedby/`, formData);

  if (response.status !== 201) {
    throw new Error('Failed to add partner');
  }

  return response.data;
};

// Updates an existing partner in the API
export const updatePartner = async (
  id: number, // ID of the partner to update
  partner: Partial<Partner> // Partial object to allow updating specific fields
): Promise<Partner> => {
  const formData = new FormData();

  // Append the image URL if provided]
  formData.append('image', partner.logo_url as File);

  // Append other fields to the form data
  Object.entries(partner).forEach(([key, value]) => {
    if (key !== 'logo_url' && value !== undefined && value !== null) {
      formData.append(key, value as string | Blob);
    }
  });

  const response = await api.put(`${base_url}trustedby/${id}`, formData);

  if (response.status !== 200) {
    throw new Error('Failed to update partner');
  }

  return response.data;
};

// Deletes an partner from the API
export const deletePartner = async (id: number): Promise<void> => {
  const response = await api.delete(`${base_url}trustedby/${id}`);

  if (response.status !== 200) {
    throw new Error('Failed to delete partner');
  }
};

export const publishPartner = async(id: number, published: { published: string }): Promise<Partner> => {
    const data = JSON.stringify(published);
    const response = await api.post(`${base_url}trustedby/published/${id}`,data,{
        headers:{
            "Content-Type":"application/json"
        }
    });
    if(response.status !== 200){
        throw new Error("Failed to publish acommodations")
    }

    return response.data;
}