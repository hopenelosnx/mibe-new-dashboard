import apiConfig from "../apiConfig";

// Define the Vehicle interface to represent the structure of a vehicle object
export interface Vehicle {
  id: number; // Unique identifier for the vehicle
  name: string; // Name of the vehicle
  published: string; // Publication date of the vehicle listing
  type: string; // Type/category of the vehicle
  price_per_day: number; // Rental price per day
  capacity?: string; // Optional: Seating capacity of the vehicle
  transmission?: string; // Optional: Transmission type (e.g., automatic, manual)
  fuel_type?: string; // Optional: Type of fuel used by the vehicle
  status?: string; // Optional: Status of the vehicle (e.g., available, rented)
  image_url?: File | string; // Optional: Image file or URL for the vehicle
  rating?: number; // Optional: Rating of the vehicle
}

// Fetch the list of vehicles from the API
export const getVehicles = async (): Promise<Vehicle[]> => {
  const response = await fetch(`${apiConfig.baseurl}vehicles/`);
  if (!response.ok) {
    throw new Error("Failed to fetch vehicles");
  }
  return response.json();
};


export const getVehiclesWithPagination = async (
  page: number = 1,
  limit: number = 10
): Promise<{
  vehicles: Vehicle[];
  pagination: {
    page: number;
    limit: number;
    totalPages: number;
    totalRecords: number;
  };
}> => {
  const response = await fetch(
    `${apiConfig.baseurl}vehicles/?page=${page}&limit=${limit}`
  );
  if (!response.ok) {
    throw new Error("Failed to fetch vehicles with pagination");
  }
  const data = await response.json();
  return {
    vehicles: data.vehicles,
    pagination: data.pagination,
  };
};
// Add a new vehicle to the API
export const addVehicle = async (
  vehicle: Omit<Vehicle, "id"> // Exclude the "id" property since it's generated by the server
): Promise<Vehicle> => {
  const formData = new FormData();

  // Append the image file to the form data
  formData.append("image", vehicle.image_url as File);

  // Append other vehicle properties to the form data
  Object.entries(vehicle).forEach(([key, value]) => {
    if (key !== "image_url" && value !== undefined && value !== null) {
      formData.append(key, value as string | Blob);
    }
  });

  // Send a POST request to add the vehicle
  const response = await fetch(`${apiConfig.baseurl}vehicles/`, {
    method: "POST",
    body: formData,
    headers:apiConfig.headers,
  });

  if (!response.ok) {
    throw new Error("Failed to add vehicle");
  }
  return response.json();
};

// Update an existing vehicle in the API
export const updateVehicle = async (
  id: number, // ID of the vehicle to update
  vehicle: Omit<Vehicle, "id"> // Exclude the "id" property since it's not updated
): Promise<Vehicle> => {
  const formData = new FormData();

  // Append the image file to the form data
  formData.append("image", vehicle.image_url as File);

  // Append other vehicle properties to the form data
  Object.entries(vehicle).forEach(([key, value]) => {
    if (key !== "image_url" && value !== undefined && value !== null) {
      formData.append(key, value as string | Blob);
    }
  });

  // Send a PUT request to update the vehicle
  const response = await fetch(`${apiConfig.baseurl}vehicles/${id}`, {
    method: "PUT",
    body: formData,
    headers:apiConfig.headers,
  });

  if (!response.ok) {
    throw new Error("Failed to update vehicle");
  }
  return response.json();
};

// Delete a vehicle from the API
export const deleteVehicle = async (id: number): Promise<void> => {
  // Send a DELETE request to remove the vehicle
  const response = await fetch(`${apiConfig.baseurl}vehicles/${id}`, {
    method: "DELETE",
    headers:apiConfig.headers,
  });

  if (!response.ok) {
    throw new Error("Failed to delete vehicle");
  }
};
