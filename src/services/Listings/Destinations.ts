import {api,base_url} from "../apiConfig";

export interface Destination {
  id: number;
  name: string;
  description?: string;
  image_url?: string;
  country: string;
  region: string;
  published: "1" | "0";
}


export const getDestinations = async (): Promise<Destination[]> => {
  const response = await api.get(`${base_url}destinations/`);
  if (response.status !== 200) {
    throw new Error("Failed to fetch destinations");
  }
  return response.data;
};

export const getDestinationsWithPagination = async (page: number = 1, limit: number = 10): Promise<{
  destinations: Destination[];
  pagination: {
    page: number;
    limit: number;
    totalPages: number;
    totalRecords: number;
  };
}> => {
  const response = await api.get(`${base_url}destinations/paginated/?page=${page}&limit=${limit}`);
  if (response.status !== 200) {
    throw new Error('Failed to fetch destinations with pagination');
  }
  const data = await response.data;
  return {
    destinations: data.destinations,
    pagination: data.pagination,
  };
}

// Adds a new Destination to the API
export const addDestination = async (
  Destination: Omit<Destination, 'id'> // Excludes 'id' since it's generated by the server
): Promise<Destination> => {
  const formData = new FormData();

  // Append the image URL if provided
  if (Destination.image_url) {
    formData.append('image', Destination.image_url);
  }

  // Append other fields to the form data
  Object.entries(Destination).forEach(([key, value]) => {
    if (key !== 'image_url' && value !== undefined && value !== null) {
      formData.append(key, value as string | Blob);
    }
  });

  const response = await api.post(`${base_url}destinations/`, formData);

  if (response.status !== 201) {
    throw new Error('Failed to add Destination');
  }

  return response.data;
};

// Updates an existing Destination in the API
export const updateDestination = async (
  id: number, // ID of the Destination to update
  Destination: Partial<Destination> // Partial object to allow updating specific fields
): Promise<Destination> => {
  const formData = new FormData();

  // Append the image URL if provided
  if (Destination.image_url) {
    formData.append('image', Destination.image_url);
  }

  // Append other fields to the form data
  Object.entries(Destination).forEach(([key, value]) => {
    if (key !== 'image_url' && value !== undefined && value !== null) {
      formData.append(key, value as string | Blob);
    }
  });

  const response = await api.put(`${base_url}destinations/${id}`, formData);

  if (response.status !== 200) {
    throw new Error('Failed to update Destination');
  }

  return response.data;
};

// Deletes an Destination from the API
export const deleteDestination = async (id: number): Promise<void> => {
  const response = await api.delete(`${base_url}destinations/${id}`);

  if (response.status !== 200) {
    throw new Error('Failed to delete Destination');
  }
};

export const publishDestination = async(id: number, published: { published: string }): Promise<Destination> => {
    const data = JSON.stringify(published);
    const response = await api.post(`${base_url}destinations/published/${id}`,data);
    if(response.status !== 201){
        console.log(response)
        throw new Error("Failed to publish Destination")
    }

    return response.data;
}